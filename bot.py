import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime, time, timedelta
import pytz
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
# üîπ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
GIRLFRIEND_ID = 1380413600  # üë©‚Äçü¶∞ –ú–∞—à—É–ª—è
YOUR_ID = 397100539          # üë¶ –¢–≤–æ–π ID

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üîπ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
tz = pytz.timezone("Asia/Tashkent")

# üîπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ë–ê–î–æ–≤ (–ø–æ –¢–∞—à–∫–µ–Ω—Ç—É)
SCHEDULE = {
    # üåÖ –£—Ç—Ä–æ ‚Äî –ñ–µ–ª–µ–∑–æ + –í–∏—Ç–∞–º–∏–Ω C
    time(9, 0): (
        "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ú–∞—à—É–ª—è!\n\n"
        "üß≤ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å **–ñ–µ–ª–µ–∑–æ (—Ö–µ–ª–∞—Ç)** –∏ **–í–∏—Ç–∞–º–∏–Ω C (500‚Äì1000 –º–≥)** üíä\n\n"
        "‚ö†Ô∏è –ù–µ –∑–∞–ø–∏–≤–∞–π –∫–æ—Ñ–µ –∏–ª–∏ —á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ ‚Äî –æ–Ω–∏ –º–µ—à–∞—é—Ç —É—Å–≤–æ–µ–Ω–∏—é.\n"
        "üíß –ó–∞–ø–µ–π –≤–æ–¥–æ–π –∏–ª–∏ —Å–æ–∫–æ–º ‚ù§Ô∏è"
    ),
    # üïõ –î–µ–Ω—å ‚Äî –û–º–µ–≥–∞-3 –∏ –í–∏—Ç–∞–º–∏–Ω D3
    time(13, 0): (
        "üïõ –û–±–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üíõ\n\n"
        "üêü –ü—Ä–∏–º–∏ **–û–º–µ–≥–∞-3 (1 –∫–∞–ø—Å—É–ª–∞)** –∏ **–í–∏—Ç–∞–º–∏–Ω D3** üåû\n\n"
        "–ú–æ–∂–Ω–æ —Å –∂–∏—Ä–Ω–æ–π –ø–∏—â–µ–π ‚Äî —Ç–∞–∫ D3 —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ª—É—á—à–µ üíß"
    ),
    # üåô –í–µ—á–µ—Ä ‚Äî –ú–∞–≥–Ω–∏–π B6, –ö–∞–ª—å—Ü–∏–π + D3, –¶–∏–Ω–∫
    time(20, 0): (
        "üåô –í–µ—á–µ—Ä–Ω—è—è –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ üí´\n\n"
        "üíÜ –ü—Ä–∏–º–∏ **–ú–∞–≥–Ω–∏–π B6**, **–ö–∞–ª—å—Ü–∏–π + D3** –∏ **–¶–∏–Ω–∫ –ø–∏–∫–æ–ª–∏–Ω–∞—Ç (1 –∫–∞–ø—Å—É–ª–∞)** üíä\n\n"
        "‚ö†Ô∏è –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π —Ü–∏–Ω–∫ –∏ –∂–µ–ª–µ–∑–æ –≤–º–µ—Å—Ç–µ ‚Äî –ø–æ—ç—Ç–æ–º—É —Ü–∏–Ω–∫ –≤–µ—á–µ—Ä–æ–º üå∏"
    ),
}

# –•—Ä–∞–Ω–∏–º, –ø—Ä–∏–Ω—è–ª–∞ –ª–∏ –ú–∞—à—É–ª—è –≤–∏—Ç–∞–º–∏–Ω—ã
taken_today = {}

# üîò –ö–Ω–æ–ø–∫–∞
def get_vitamin_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="taken"))
    return kb


# üìç –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.from_user.id == GIRLFRIEND_ID:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –ú–∞—à—É–ª—è ‚òÄÔ∏è\n"
            "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –∏ –ë–ê–î—ã –≤–æ–≤—Ä–µ–º—è üíä‚ù§Ô∏è"
        )
    elif message.from_user.id == YOUR_ID:
        await message.answer(
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üíª\n"
            "–Ø —Å–æ–æ–±—â—É —Ç–µ–±–µ, –µ—Å–ª–∏ –ú–∞—à—É–ª—è –Ω–µ –Ω–∞–∂–º—ë—Ç ¬´–ü—Ä–∏–Ω—è–ª–∞¬ª ‚ù§Ô∏è"
        )
    else:
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üíä")


# üìç –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == "taken")
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)

    key = datetime.now(tz).strftime("%Y-%m-%d %H:%M")
    taken_today[key] = True

    await bot.send_message(user_id, "–ú–æ—è —É–º–Ω–∏—Ü–∞, –ª—é–±–ª—é —Ç–µ–±—è ‚ù§Ô∏è")
    await bot.delete_message(user_id, callback_query.message.message_id)


# üìç –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    while True:
        now = datetime.now(tz)
        now_time = now.time().replace(second=0, microsecond=0)

        if now_time in SCHEDULE:
            text = SCHEDULE[now_time]
            key = now.strftime("%Y-%m-%d %H:%M")

            if key not in taken_today:
                try:
                    await bot.send_message(GIRLFRIEND_ID, text, reply_markup=get_vitamin_keyboard())
                    logging.info(f"üì§ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:40]}...")

                    # –∂–¥—ë–º 1 —á–∞—Å, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–±–µ
                    await asyncio.sleep(3600)

                    if key not in taken_today:
                        await bot.send_message(
                            YOUR_ID,
                            f"‚ö†Ô∏è –ú–∞—à—É–ª—è –Ω–µ –Ω–∞–∂–∞–ª–∞ ¬´–ü—Ä–∏–Ω—è–ª–∞¬ª –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:\n\n{text}"
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await asyncio.sleep(60)


# üìç –ó–∞–ø—É—Å–∫
async def on_startup(_):
    asyncio.create_task(send_reminders())
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ –¢–∞—à–∫–µ–Ω—Ç—É)...")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


