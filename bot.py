import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime, time, timedelta
import pytz
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
# üîπ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
GIRLFRIEND_ID = 1380413600  # üë©‚Äçü¶∞ –ú–∞—à—É–ª—è
YOUR_ID = 397100539          # üë¶ –¢–≤–æ–π ID

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üîπ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
tz = pytz.timezone("Asia/Tashkent")

# üîπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤
SCHEDULE = {
    time(9, 0): "üåû –£—Ç—Ä–æ!\n–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å D3 + –û–º–µ–≥–∞-3 + –¶–∏–Ω–∫ + –í–∏—Ç–∞–º–∏–Ω C üíä",
    time(13, 0): "üçΩ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –ö–∞–ª—å—Ü–∏–π + D3 üíä",
    time(16, 0): "ü©∏ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ñ–µ–ª–µ–∑–æ üíä",
    time(20, 0): "üåô –ü–µ—Ä–µ–¥ —Å–Ω–æ–º ‚Äî –ú–∞–≥–Ω–∏–π + –í6 üíä",
}

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø—Ä–∏–Ω—è–ª–∞ –ª–∏ –ú–∞—à—É–ª—è –≤–∏—Ç–∞–º–∏–Ω—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
taken_today = {}

# üìç –ö–Ω–æ–ø–∫–∞
def get_vitamin_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="taken"))
    return keyboard


# üìç –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.from_user.id == GIRLFRIEND_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ú–∞—à—É–ª—è ‚òÄÔ∏è\n–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –≤–æ–≤—Ä–µ–º—è üíä‚ù§Ô∏è")
    elif message.from_user.id == YOUR_ID:
        await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üíª –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ, –µ—Å–ª–∏ –ú–∞—à—É–ª—è –Ω–µ –ø—Ä–∏–º–µ—Ç –≤–∏—Ç–∞–º–∏–Ω—ã.")
    else:
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üíä")


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == "taken")
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)

    # –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ú–∞—à—É–ª—è –ø—Ä–∏–Ω—è–ª–∞ –≤–∏—Ç–∞–º–∏–Ω—ã
    taken_today[datetime.now(tz).strftime("%Y-%m-%d %H:%M")] = True

    await bot.send_message(user_id, "–ú–æ—è —É–º–Ω–∏—Ü–∞, –ª—é–±–ª—é —Ç–µ–±—è ‚ù§Ô∏è")
    await bot.delete_message(user_id, callback_query.message.message_id)


# üìç –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    while True:
        now = datetime.now(tz)
        now_time = now.time().replace(second=0, microsecond=0)

        if now_time in SCHEDULE:
            text = SCHEDULE[now_time]
            date_key = now.strftime("%Y-%m-%d %H:%M")

            if date_key not in taken_today:  # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                try:
                    await bot.send_message(GIRLFRIEND_ID, text, reply_markup=get_vitamin_keyboard())
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

                    # –ñ–¥—ë–º 1 —á–∞—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª–∞ –ª–∏ –æ–Ω–∞ "–ü—Ä–∏–Ω—è–ª–∞"
                    await asyncio.sleep(3600)

                    if date_key not in taken_today:
                        await bot.send_message(
                            YOUR_ID,
                            f"‚ö†Ô∏è –ú–∞—à—É–ª—è –Ω–µ –Ω–∞–∂–∞–ª–∞ '–ü—Ä–∏–Ω—è–ª–∞' –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:\n\n{text}"
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await asyncio.sleep(60)


# üìç –ó–∞–ø—É—Å–∫
async def on_startup(_):
    asyncio.create_task(send_reminders())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ –¢–∞—à–∫–µ–Ω—Ç—É)...")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

